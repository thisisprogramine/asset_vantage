Index: lib/src/presentation/blocs/favorites/favorites_cubit.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nimport 'dart:developer';\n\nimport 'package:asset_vantage/src/config/constants/favorite_constants.dart';\nimport 'package:asset_vantage/src/domain/entities/favorites/favorites_entity.dart';\nimport 'package:asset_vantage/src/domain/usecases/favorites/favorites.dart';\nimport 'package:asset_vantage/src/presentation/blocs/performance/performance_report/performance_report_cubit.dart';\nimport 'package:dartz/dartz.dart';\nimport 'package:equatable/equatable.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\n\nimport '../../../data/models/currency/currency_model.dart';\nimport '../../../data/models/dashboard/dashboard_entity_model.dart';\nimport '../../../data/models/denomination/denomination_model.dart';\nimport '../../../data/models/favorites/favorites_model.dart';\nimport '../../../data/models/performance/performance_primary_grouping_model.dart';\nimport '../../../data/models/performance/performance_primary_sub_grouping_model.dart' as subPrimaryM;\nimport '../../../data/models/performance/performance_secondary_grouping_model.dart';\nimport '../../../data/models/preferences/user_preference.dart';\nimport '../../../data/models/return_percentage/return_percentage_model.dart';\nimport '../../../domain/entities/app_error.dart';\nimport '../../../domain/entities/currency/currency_entity.dart';\nimport '../../../domain/entities/dashboard/dashboard_list_entity.dart';\nimport '../../../domain/entities/denomination/denomination_entity.dart';\nimport '../../../domain/entities/performance/performance_primary_grouping_entity.dart' as primary;\nimport '../../../domain/entities/performance/performance_primary_sub_grouping_enity.dart' as subPrimary;\nimport '../../../domain/entities/performance/performance_secondary_grouping_entity.dart' as secondary;\nimport '../../../domain/entities/performance/performance_secondary_sub_grouping_enity.dart' as subSecondary;\nimport '../../../domain/entities/return_percentage/return_percentage_entity.dart';\nimport '../../../domain/params/favorites/favorites_params.dart';\nimport '../../../domain/params/no_params.dart';\nimport '../../../domain/usecases/preferences/get_user_preference.dart';\nimport '../../../injector.dart';\nimport '../authentication/login_check/login_check_cubit.dart';\n\nimport '../../../data/models/performance/performance_secondary_sub_grouping_model.dart' as subSecondaryM;\n\npart 'favorites_state.dart';\n\nclass FavoritesCubit extends Cubit<FavoritesState> {\n  final LoginCheckCubit loginCheckCubit;\n  final FavoritesReport favoritesReport;\n  final GetUserPreference getUserPreference;\n\n\n  FavoritesCubit({\n    required this.loginCheckCubit,\n    required this.favoritesReport,\n    required this.getUserPreference,\n  })\n      : super(FavoritesInitial());\n\n  Future<void> loadFavorites() async {\n    emit(FavoritesLoading());\n\n\n    final Either<AppError, UserPreference> eitherUserPreference = await getUserPreference(NoParams());\n\n    eitherUserPreference.fold((error) {},\n            (user) async{\n\n      final Either<AppError, FavoritesEntity> eitherFavorites = await favoritesReport(\n          FavoritesParams(\n              action: FavoriteConstants.fetch,\n              userId: user.user?.id.toString(),\n              systemName: user.systemName\n          )\n      );\n\n      eitherFavorites.fold(\n            (error) {\n          if(error.appErrorType==AppErrorType.unauthorised){\n            loginCheckCubit.loginCheck();\n          }\n          return emit(FavoritesError(\n              errorType: error.appErrorType));\n        },\n            (favoritesEntity) {\n              final cubitList = favoritesEntity.favoriteList?.map((fav) {\n                if(fav.reportId==\"2\"){\n                  final performanceReportCubit = getItInstance<PerformanceReportCubit>();\n                  performanceReportCubit.loadPerformanceReportForFavorites(favorite: fav);\n                  return performanceReportCubit;\n                }\n              },).toList();\n\n          emit(FavoritesLoaded(\n            favoritesList: favoritesEntity.favoriteList,\n            reportCubitList: cubitList,\n          ));\n        },\n      );\n\n    });\n  }\n\n  Future<void> saveFilters({\n    bool shouldUpdate = false,\n    String? itemId,\n    required int reportId,\n    required String reportName,\n    required EntityData? entity,\n    required primary.GroupingEntity? primaryGrouping,\n    required List<subPrimary.SubGroupingItemData?>? primarySubGrouping,\n    required secondary.GroupingEntity? secondaryGrouping,\n    required List<subSecondary.SubGroupingItemData?>? secondarySubGrouping,\n    required List<ReturnPercentItemData?>? returnPercent,\n    required Currency? currency,\n    required DenominationData? denomination,\n    required String? asOnDate,\n  }) async {\n\n    final Either<AppError, UserPreference> eitherUserPreference = await getUserPreference(NoParams());\n\n    eitherUserPreference.fold((error) {},\n            (user) async{\n              final favParams = FavoritesParams(\n                id: itemId!=null?int.parse(itemId):null,\n                action: shouldUpdate ? FavoriteConstants.update : FavoriteConstants.add,\n                userId: user.user?.id.toString(),\n                systemName: user.systemName,\n                reportId: reportId.toString(),\n                reportName: reportName,\n                entity: Entity(\n                  id: entity?.id,\n                  name: entity?.name,\n                  type: entity?.type,\n                  currency: entity?.currency,\n                  accountingyear: entity?.accountingyear,\n                ).toJson(),\n                primaryGrouping: PrimaryGrouping(\n                    id: primaryGrouping?.id,\n                    name: primaryGrouping?.name\n                ).toJson(),\n                primarySubGrouping: primarySubGrouping?.map((element) => subPrimaryM.SubGroupingItem(\n                    id: element?.id,\n                    name: element?.name\n                ).toJson()\n                ).toList(),\n                secondaryGrouping: SecondaryGrouping(\n                  id: secondaryGrouping?.id,\n                  name: secondaryGrouping?.name,\n                ).toJson(),\n                secondarySubGrouping: secondarySubGrouping?.map((element) => subSecondaryM.SubGroupingItem(\n                    id: element?.id,\n                    name: element?.name\n                ).toJson()\n                ).toList(),\n                returnPercent: returnPercent?.map((element) => ReturnPercentItem(\n                  id: element?.id,\n                  value: element?.value ?? ReturnType.MTD,\n                  key: element?.key,\n                  name: element?.name,\n                ).toJson()).toList(),\n                currency: CurrencyData(\n                    id: currency?.id,\n                    code: currency?.code,\n                    format: currency?.format\n                ).toJson(),\n                denomination: DenData(\n                    id: denomination?.id,\n                    key: denomination?.key,\n                    title: denomination?.title,\n                    suffix: denomination?.suffix,\n                    denomination: denomination?.denomination\n                ).toJson(),\n                asOnDate: asOnDate,\n              );\n              final originalFavList = [...?(state.favorites)];\n              final originalFavCubitList = [...?(state.reportCubits)];\n              log(\"original length::${originalFavCubitList.length}::${originalFavList.length}\");\n              if(!shouldUpdate) {\n                List<Favorite>? tempFavorites = state.favorites;\n                List? tempCubitList = state.reportCubits;\n\n                Favorite favItemToAdd = FavoriteItem.fromJson(\n                    favParams.toJson()['data']\n                );\n\n                tempFavorites?.add(\n                    favItemToAdd\n                );\n\n                final performanceReportCubit = getItInstance<PerformanceReportCubit>();\n                performanceReportCubit.loadPerformanceReportForFavorites(favorite: favItemToAdd);\n\n                tempCubitList?.add(\n                  performanceReportCubit\n                );\n\n                emit(FavoritesInitial());\n                emit(FavoritesLoaded(favoritesList: tempFavorites,reportCubitList: tempCubitList));\n              } else{\n                List<Favorite>? tempFavorites = state.favorites;\n                List? tempCubitList = state.reportCubits;\n                Favorite updatedItem = FavoriteItem.fromJson(\n                    favParams.toJson()['data']\n                );\n                final indexOfUpdatableItem = tempFavorites?.indexWhere((element) => element.id.toString()==itemId,) ?? 0;\n                tempFavorites?.removeAt(indexOfUpdatableItem);\n                tempFavorites?.insert(indexOfUpdatableItem,updatedItem);\n                emit(FavoritesInitial());\n                emit(FavoritesLoaded(favoritesList: tempFavorites,reportCubitList: tempCubitList));\n              }\n\n\n          final Either<AppError, FavoritesEntity> eitherFavorites = await favoritesReport(\n              favParams\n          );\n\n          eitherFavorites.fold(\n                (error) {\n              if(error.appErrorType==AppErrorType.unauthorised){\n                loginCheckCubit.loginCheck();\n              }\n              emit(FavoritesInitial());\n              emit(FavoritesLoaded(favoritesList: originalFavList,reportCubitList: originalFavCubitList,error: FavouriteError(create: shouldUpdate,update: shouldUpdate)));\n            },\n                (favoritesEntity) {\n                  if(!shouldUpdate){\n                    List<Favorite>? tempFavorites = state.favorites;\n                    List? tempCubitList = state.reportCubits;\n                    Favorite updatedItem = FavoriteItem.fromJson(\n                        FavoritesParams(\n                          id: favoritesEntity.id,\n                          action: shouldUpdate ? FavoriteConstants.update : FavoriteConstants.add,\n                          userId: user.user?.id.toString(),\n                          systemName: user.systemName,\n                          reportId: reportId.toString(),\n                          reportName: reportName,\n                          entity: Entity(\n                            id: entity?.id,\n                            name: entity?.name,\n                            type: entity?.type,\n                            currency: entity?.currency,\n                            accountingyear: entity?.accountingyear,\n                          ).toJson(),\n                          primaryGrouping: PrimaryGrouping(\n                              id: primaryGrouping?.id,\n                              name: primaryGrouping?.name\n                          ).toJson(),\n                          primarySubGrouping: primarySubGrouping?.map((element) => subPrimaryM.SubGroupingItem(\n                              id: element?.id,\n                              name: element?.name\n                          ).toJson()\n                          ).toList(),\n                          secondaryGrouping: SecondaryGrouping(\n                            id: secondaryGrouping?.id,\n                            name: secondaryGrouping?.name,\n                          ).toJson(),\n                          secondarySubGrouping: secondarySubGrouping?.map((element) => subSecondaryM.SubGroupingItem(\n                              id: element?.id,\n                              name: element?.name\n                          ).toJson()\n                          ).toList(),\n                          returnPercent: returnPercent?.map((element) => ReturnPercentItem(\n                            id: element?.id,\n                            value: element?.value ?? ReturnType.MTD,\n                            key: element?.key,\n                            name: element?.name,\n                          ).toJson()).toList(),\n                          currency: CurrencyData(\n                              id: currency?.id,\n                              code: currency?.code,\n                              format: currency?.format\n                          ).toJson(),\n                          denomination: DenData(\n                              id: denomination?.id,\n                              key: denomination?.key,\n                              title: denomination?.title,\n                              suffix: denomination?.suffix,\n                              denomination: denomination?.denomination\n                          ).toJson(),\n                          asOnDate: asOnDate,\n                        ).toJson()['data']\n                    );\n                    final indexOfUpdatableItem = tempFavorites?.indexWhere((element) => element.id==null,) ?? 0;\n                    tempFavorites?.removeAt(indexOfUpdatableItem);\n                    tempFavorites?.insert(indexOfUpdatableItem,updatedItem);\n                    emit(FavoritesInitial());\n                    emit(FavoritesLoaded(favoritesList: tempFavorites,reportCubitList: tempCubitList,success: FavouriteSuccess(create: shouldUpdate,update: shouldUpdate)));\n                  }\n            },\n          );\n\n        });\n  }\n\n  Future<void> removeFavorites({required Favorite? favorite}) async{\n    final Either<AppError, UserPreference> eitherUserPreference = await getUserPreference(NoParams());\n    List<Favorite>? favoritesList = state.favorites;\n    List? cubitList = state.reportCubits;\n\n    // emit(FavoritesInitial());\n    // emit(FavoritesLoaded(favoritesList: favoritesList,reportCubitList: state.reportCubits));\n\n    List<Favorite>? originalFovouriteList = [...?state.favorites];\n    List? originalCubitList = [...?state.reportCubits];\n\n    int? index = favoritesList?.indexWhere((item) => item.id == favorite?.id);\n\n    if(index != null) {\n      favoritesList?.removeAt(index);\n      cubitList?.removeAt(index);\n    }\n\n    emit(FavoritesInitial());\n    emit(FavoritesLoaded(favoritesList: favoritesList,reportCubitList: cubitList));\n\n    eitherUserPreference.fold((error) {},\n            (user) async{\n\n          final Either<AppError, FavoritesEntity> eitherFavorites = await favoritesReport(\n              FavoritesParams(\n                id: favorite?.id,\n                action: FavoriteConstants.delete,\n                userId: user.user?.id.toString(),\n                systemName: user.systemName,\n              )\n          );\n\n          eitherFavorites.fold(\n                (error) {\n                  emit(FavoritesInitial());\n                  emit(FavoritesLoaded(favoritesList: originalFovouriteList,reportCubitList: originalCubitList,error: const FavouriteError(delete: true)));\n            },\n                (favoriteEntity) {\n                  emit(FavoritesInitial());\n                  emit(FavoritesLoaded(favoritesList: favoritesList,reportCubitList: cubitList,success: const FavouriteSuccess(delete: true)));\n              print(\"Favorite: ${favoriteEntity.message}\");\n            },\n          );\n        });\n  }\n\n  Future<void> updateFavoriteReportName({required Favorite? favorite, required String reportName}) async{\n    List<Favorite>? favoritesList = state.favorites;\n    List? cubitList = state.reportCubits;\n\n    emit(FavoritesInitial());\n    emit(FavoritesLoaded(favoritesList: favoritesList,reportCubitList: cubitList,nameLoading: FavoriteNameLoading(id: favorite?.id)));\n\n    final originalFavList = [...?(state.favorites)];\n    final originalFavCubitList = [...?(state.reportCubits)];\n\n    int? index = favoritesList?.indexWhere((item) => item.id == favorite?.id);\n    if(index != null) {\n      Favorite? tempFavorite = favoritesList?[index];\n      favoritesList?.removeAt(index);\n      favoritesList?.insert(index, FavoriteItem(\n        id: tempFavorite?.id,\n        userId: tempFavorite?.userId,\n        systemName: tempFavorite?.systemName,\n        reportname: reportName,\n        filter: tempFavorite?.filter,\n        level: tempFavorite?.level,\n        itemid: tempFavorite?.itemid,\n        isPined: tempFavorite?.isPined,\n        createdAt: tempFavorite?.createdAt,\n        updatedAt: tempFavorite?.updatedAt,\n      ));\n    }\n\n\n    final Either<AppError, UserPreference> eitherUserPreference = await getUserPreference(NoParams());\n\n    eitherUserPreference.fold((error) {},\n            (user) async{\n          final Either<AppError, FavoritesEntity> eitherFavorites = await favoritesReport(\n              FavoritesParams(\n                id: favorite?.id,\n                action: FavoriteConstants.update,\n                userId: user.user?.id.toString(),\n                systemName: user.systemName,\n                reportName: reportName.isNotEmpty ? reportName: FavoriteConstants.performanceName,\n              )\n          );\n\n          eitherFavorites.fold(\n                (error) {\n                  emit(FavoritesInitial());\n                  emit(FavoritesLoaded(favoritesList: originalFavList,reportCubitList: originalFavCubitList,error: const FavouriteError(nameChange: true)));\n            },\n                (favoriteEntity) {\n              emit(FavoritesInitial());\n              emit(FavoritesLoaded(favoritesList: favoritesList,reportCubitList: cubitList,success: const FavouriteSuccess(nameChange: true)));\n              print(\"Favorite: ${favoriteEntity.message}\");\n            },\n          );\n        });\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/src/presentation/blocs/favorites/favorites_cubit.dart b/lib/src/presentation/blocs/favorites/favorites_cubit.dart
--- a/lib/src/presentation/blocs/favorites/favorites_cubit.dart	(revision c2f4d3973856b591a98ccedfc7da5c80b85d39a3)
+++ b/lib/src/presentation/blocs/favorites/favorites_cubit.dart	(date 1731918580344)
@@ -278,7 +278,7 @@
                     tempFavorites?.removeAt(indexOfUpdatableItem);
                     tempFavorites?.insert(indexOfUpdatableItem,updatedItem);
                     emit(FavoritesInitial());
-                    emit(FavoritesLoaded(favoritesList: tempFavorites,reportCubitList: tempCubitList,success: FavouriteSuccess(create: shouldUpdate,update: shouldUpdate)));
+                    emit(FavoritesLoaded(favoritesList: tempFavorites,reportCubitList: tempCubitList,success: FavouriteSuccess(create: true)));
                   }
             },
           );
@@ -389,4 +389,60 @@
           );
         });
   }
+
+  Future<void> pinUnpinFavoriteReport({required Favorite? favorite}) async{
+    List<Favorite>? favoritesList = state.favorites;
+    List? cubitList = state.reportCubits;
+
+    final originalFavList = [...?(state.favorites)];
+    final originalFavCubitList = [...?(state.reportCubits)];
+
+    int? index = favoritesList?.indexWhere((item) => item.id == favorite?.id);
+    Favorite? tempFavorite;
+    if(index != null) {
+      tempFavorite = favoritesList?[index];
+      favoritesList?.removeAt(index);
+      favoritesList?.insert(0, FavoriteItem(
+        id: tempFavorite?.id,
+        reportid: tempFavorite?.reportId,
+        userId: tempFavorite?.userId,
+        systemName: tempFavorite?.systemName,
+        reportname: tempFavorite?.reportname,
+        filter: tempFavorite?.filter,
+        level: tempFavorite?.level,
+        itemid: tempFavorite?.itemid,
+        isPined: !(tempFavorite?.isPined ?? false),
+        createdAt: tempFavorite?.createdAt,
+        updatedAt: tempFavorite?.updatedAt,
+      ));
+    }
+
+
+    final Either<AppError, UserPreference> eitherUserPreference = await getUserPreference(NoParams());
+
+    eitherUserPreference.fold((error) {},
+            (user) async{
+          final Either<AppError, FavoritesEntity> eitherFavorites = await favoritesReport(
+              FavoritesParams(
+                id: favorite?.id,
+                action: FavoriteConstants.update,
+                userId: user.user?.id.toString(),
+                systemName: user.systemName,
+                isPinned: !(tempFavorite?.isPined ?? false),
+              )
+          );
+
+          eitherFavorites.fold(
+                (error) {
+              emit(FavoritesInitial());
+              emit(FavoritesLoaded(favoritesList: originalFavList,reportCubitList: originalFavCubitList,error: const FavouriteError(pinUnpin: true)));
+            },
+                (favoriteEntity) {
+              emit(FavoritesInitial());
+              emit(FavoritesLoaded(favoritesList: favoritesList,reportCubitList: cubitList,success: const FavouriteSuccess(pinUnpin: true)));
+              print("Favorite: ${favoriteEntity.message}");
+            },
+          );
+        });
+  }
 }
Index: lib/src/presentation/blocs/favorites/favorites_state.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>part of 'favorites_cubit.dart';\n\nabstract class FavoritesState extends Equatable {\n  final List<Favorite>? favorites;\n  final List? reportCubits;\n  const FavoritesState({this.favorites,this.reportCubits});\n\n  @override\n  List<Object> get props => [];\n}\n\nclass FavoritesInitial extends FavoritesState {}\n\nclass FavoritesLoaded extends FavoritesState {\n  final List<Favorite>? favoritesList;\n  final List? reportCubitList;\n  FavouriteSuccess? success;\n  FavouriteError? error;\n  FavoriteNameLoading? nameLoading;\n  FavoritesLoaded({\n    required this.favoritesList,\n    required this.reportCubitList,\n    this.success,\n    this.error,\n    this.nameLoading,\n  }) :super(favorites: favoritesList,reportCubits: reportCubitList);\n\n  @override\n  List<Object> get props => [];\n}\n\nclass FavoritesError extends FavoritesState {\n  final AppErrorType errorType;\n\n  const FavoritesError({\n    required this.errorType,\n  });\n}\n\nclass FavoritesLoading extends FavoritesState {}\n\nclass FavoriteNameLoading extends FavoritesState {\n  final int? id;\n  const FavoriteNameLoading({this.id});\n}\n\nclass FavouriteSuccess {\n  final bool? create;\n  final bool? update;\n  final bool? delete;\n  final bool? nameChange;\n  const FavouriteSuccess({this.create, this.delete, this.update,this.nameChange}): assert(create!=null || update!=null || delete!=null || nameChange!=null,\"only one needed\");\n\n  String get message {\n    return \"Successfully ${(create ?? false)?'created':(update ?? false)?'updated':(delete ?? false)?'deleted':'changed name of'} favourite\";\n  }\n}\n\nclass FavouriteError {\n  final bool? create;\n  final bool? update;\n  final bool? delete;\n  final bool? nameChange;\n  const FavouriteError({this.create, this.delete, this.update,this.nameChange}): assert(create!=null || update!=null || delete!=null || nameChange!=null,\"only one needed\");\n\n  String get message {\n    return \"Failed to ${(create ?? false)?'create':(update ?? false)?'update':(delete ?? false)?'delete':'change name of'} favourite\";\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/src/presentation/blocs/favorites/favorites_state.dart b/lib/src/presentation/blocs/favorites/favorites_state.dart
--- a/lib/src/presentation/blocs/favorites/favorites_state.dart	(revision c2f4d3973856b591a98ccedfc7da5c80b85d39a3)
+++ b/lib/src/presentation/blocs/favorites/favorites_state.dart	(date 1731918580345)
@@ -49,10 +49,11 @@
   final bool? update;
   final bool? delete;
   final bool? nameChange;
-  const FavouriteSuccess({this.create, this.delete, this.update,this.nameChange}): assert(create!=null || update!=null || delete!=null || nameChange!=null,"only one needed");
+  final bool? pinUnpin;
+  const FavouriteSuccess({this.create, this.delete, this.update,this.nameChange,this.pinUnpin}): assert(create!=null || update!=null || delete!=null || nameChange!=null || pinUnpin!=null,"only one needed");
 
   String get message {
-    return "Successfully ${(create ?? false)?'created':(update ?? false)?'updated':(delete ?? false)?'deleted':'changed name of'} favourite";
+    return "Successfully ${(create ?? false)?'created':(update ?? false)?'updated':(delete ?? false)?'deleted':(nameChange ?? false)?'changed name of':(pinUnpin ?? false)?"pinned":"unpinned"} favourite";
   }
 }
 
@@ -61,9 +62,10 @@
   final bool? update;
   final bool? delete;
   final bool? nameChange;
-  const FavouriteError({this.create, this.delete, this.update,this.nameChange}): assert(create!=null || update!=null || delete!=null || nameChange!=null,"only one needed");
+  final bool? pinUnpin;
+  const FavouriteError({this.create, this.delete, this.update,this.nameChange,this.pinUnpin}): assert(create!=null || update!=null || delete!=null || nameChange!=null || pinUnpin!=null,"only one needed");
 
   String get message {
-    return "Failed to ${(create ?? false)?'create':(update ?? false)?'update':(delete ?? false)?'delete':'change name of'} favourite";
+    return "Failed to ${(create ?? false)?'create':(update ?? false)?'update':(delete ?? false)?'delete':(nameChange ?? false)?'change name of':(pinUnpin ?? false)?"pin":"unpin"} favourite";
   }
 }
\ No newline at end of file
Index: lib/src/domain/params/favorites/favorites_params.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:asset_vantage/src/config/constants/favorite_constants.dart';\n\nclass FavoritesParams{\n  final String action;\n  final int? id;\n  final String? userId;\n  final String? systemName;\n  final String? reportName;\n  final String? reportId;\n  final Map<dynamic, dynamic>? entity;\n  final Map<dynamic, dynamic>? primaryGrouping;\n  final List<Map<dynamic, dynamic>>? primarySubGrouping;\n  final Map<dynamic, dynamic>? secondaryGrouping;\n  final List<Map<dynamic, dynamic>>? secondarySubGrouping;\n  final Map<dynamic, dynamic>? period;\n  final Map<dynamic, dynamic>? numberOfPeriod;\n  final List<Map<dynamic, dynamic>>? returnPercent;\n  final Map<dynamic, dynamic>? currency;\n  final Map<dynamic, dynamic>? denomination;\n  final String? asOnDate;\n  final String? drillDownLevel;\n  final String? drillDownItemId;\n  final bool? isPinned;\n\n\n\n  const FavoritesParams({\n    required this.action,\n    this.id,\n    this.userId,\n    this.systemName,\n    this.reportName,\n    this.reportId,\n    this.entity,\n    this.primaryGrouping,\n    this.primarySubGrouping,\n    this.secondaryGrouping,\n    this.secondarySubGrouping,\n    this.period,\n    this.numberOfPeriod,\n    this.returnPercent,\n    this.currency,\n    this.denomination,\n    this.asOnDate,\n    this.drillDownLevel,\n    this.drillDownItemId,\n    this.isPinned,\n  });\n\n  Map<String, dynamic> toJson() {\n    return {\n      \"action\": action,\n      \"data\": {\n        if(id != null)\n          \"id\": id,\n        if(userId != null)\n          \"user_id\": userId,\n        if(systemName != null)\n          \"system_name\": systemName,\n        if(reportName != null)\n          \"reportname\": reportName,\n        if(reportId != null)\n          \"reportid\": reportId,\n        if(entity != null || primaryGrouping != null || primarySubGrouping != null || secondaryGrouping != null || secondarySubGrouping != null\n            || period != null || numberOfPeriod != null || returnPercent != null || currency != null || denomination != null || asOnDate != null)\n          \"filter\": {\n            if(entity != null)\n              FavoriteConstants.entityFilter: entity,\n            if(primaryGrouping != null)\n              FavoriteConstants.primaryGrouping: primaryGrouping,\n            if(primarySubGrouping != null)\n              FavoriteConstants.primarySubGrouping: primarySubGrouping,\n            if(secondaryGrouping != null)\n              FavoriteConstants.secondaryGrouping: secondaryGrouping,\n            if(secondarySubGrouping != null)\n              FavoriteConstants.secondarySubGrouping: secondarySubGrouping,\n            if(period != null)\n              FavoriteConstants.period: period,\n            if(numberOfPeriod != null)\n              FavoriteConstants.numberOfPeriod: numberOfPeriod,\n            if(returnPercent != null)\n              FavoriteConstants.returnPercent: returnPercent,\n            if(currency != null)\n              FavoriteConstants.currency: currency,\n            if(denomination != null)\n              FavoriteConstants.denomination: denomination,\n            if(asOnDate != null)\n              FavoriteConstants.asOnDate: asOnDate,\n          },\n        if(drillDownLevel != null)\n          \"level\": drillDownLevel,\n        if(drillDownItemId != null)\n          \"itemid\": drillDownItemId,\n        if(isPinned != null)\n          \"isPined\": isPinned\n        },\n      };\n    }\n  }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/src/domain/params/favorites/favorites_params.dart b/lib/src/domain/params/favorites/favorites_params.dart
--- a/lib/src/domain/params/favorites/favorites_params.dart	(revision c2f4d3973856b591a98ccedfc7da5c80b85d39a3)
+++ b/lib/src/domain/params/favorites/favorites_params.dart	(date 1731918580343)
@@ -91,8 +91,7 @@
           "level": drillDownLevel,
         if(drillDownItemId != null)
           "itemid": drillDownItemId,
-        if(isPinned != null)
-          "isPined": isPinned
+          "isPined": false
         },
       };
     }
Index: lib/src/presentation/screens/favorite/favorite_screen.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:asset_vantage/src/config/extensions/size_extensions.dart';\nimport 'package:asset_vantage/src/presentation/av_app.dart';\nimport 'package:asset_vantage/src/presentation/blocs/favorites/favorites_cubit.dart';\nimport 'package:asset_vantage/src/utilities/helper/flash_helper.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\n\nimport '../../../config/constants/size_constants.dart';\nimport '../../theme/theme_color.dart';\nimport '../../widgets/EditableTitle.dart';\nimport '../../widgets/circular_progress.dart';\nimport 'favorite_performance_widget.dart';\n\nclass FavoritesScreen extends StatefulWidget {\n  const FavoritesScreen({super.key});\n\n  @override\n  State<FavoritesScreen> createState() => _FavoritesScreenState();\n}\n\nclass _FavoritesScreenState extends State<FavoritesScreen> {\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Row(\n          children: [\n            Expanded(\n              child: GestureDetector(\n                onTap: () {\n                  Navigator.of(context).pop();\n                },\n                child: Row(\n                  children: [\n                    Expanded(\n                      child: Padding(\n                        padding: EdgeInsets.symmetric(\n                            horizontal: Sizes.dimen_14.w,\n                            vertical: Sizes.dimen_4.h),\n                        child: Text(\n                          \"Favorites\",\n                          style: Theme.of(context)\n                              .textTheme\n                              .headlineMedium\n                              ?.copyWith(\n                                fontWeight: FontWeight.bold,\n                              ),\n                        ),\n                      ),\n                    )\n                  ],\n                ),\n              ),\n            )\n          ],\n        ),\n        Expanded(\n          child: BlocBuilder<FavoritesCubit, FavoritesState>(\n              builder: (context, state) {\n            if (state is FavoritesLoaded) {\n              if(state.success!=null){\n                FlashHelper.showToastMessage(context, message: state.success?.message ?? \"Success\");\n              }else if(state.error!=null){\n                FlashHelper.showToastMessage(context, message: state.error?.message ?? \"Error\");\n              }\n              state.success = null;\n              state.error = null;\n              if (state.favoritesList != null &&\n                  (state.favoritesList?.isNotEmpty ?? false)) {\n                return Padding(\n                  padding: EdgeInsets.symmetric(horizontal: Sizes.dimen_12.w),\n                  child: SingleChildScrollView(\n                    child: Column(\n                      children: state.favoritesList\n                          ?.map(\n                            (favorite) => Padding(\n                              padding:\n                                  EdgeInsets.symmetric(vertical: Sizes.dimen_1.h),\n                              child: FavoritePerformanceWidget(\n                                key: ValueKey(favorite.id),\n                                isLastIndex:\n                                    state.favoritesList?.indexOf(favorite) ==\n                                        (state.favoritesList?.length ?? 0) - 1,\n                                favorite: favorite,\n                                performanceReportCubit: state.reportCubitList?[state.favoritesList?.indexOf(favorite) ?? 0],\n                              ),\n                            ),\n                          )\n                          .toList() as List<Widget>,\n                    ),\n                  ),\n                );\n              } else {\n                return Center(\n                  child: Text(\n                    \"No Favorites\",\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                );\n              }\n            } else if (state is FavoritesLoading) {\n              return const Center(child: CircularProgressWidget());\n            } else if (state is FavoritesError) {\n              return Center(\n                child: Text(\n                  \"Failed to load Favorites\",\n                  style: Theme.of(context).textTheme.titleMedium,\n                ),\n              );\n            }\n            return Placeholder();\n          }),\n        ),\n      ],\n    );\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/src/presentation/screens/favorite/favorite_screen.dart b/lib/src/presentation/screens/favorite/favorite_screen.dart
--- a/lib/src/presentation/screens/favorite/favorite_screen.dart	(revision c2f4d3973856b591a98ccedfc7da5c80b85d39a3)
+++ b/lib/src/presentation/screens/favorite/favorite_screen.dart	(date 1731918580347)
@@ -1,13 +1,10 @@
 import 'package:asset_vantage/src/config/extensions/size_extensions.dart';
-import 'package:asset_vantage/src/presentation/av_app.dart';
 import 'package:asset_vantage/src/presentation/blocs/favorites/favorites_cubit.dart';
 import 'package:asset_vantage/src/utilities/helper/flash_helper.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 
 import '../../../config/constants/size_constants.dart';
-import '../../theme/theme_color.dart';
-import '../../widgets/EditableTitle.dart';
 import '../../widgets/circular_progress.dart';
 import 'favorite_performance_widget.dart';
 
@@ -19,6 +16,7 @@
 }
 
 class _FavoritesScreenState extends State<FavoritesScreen> {
+  final ScrollController _scrollController = ScrollController();
   @override
   void initState() {
     super.initState();
@@ -75,6 +73,7 @@
                 return Padding(
                   padding: EdgeInsets.symmetric(horizontal: Sizes.dimen_12.w),
                   child: SingleChildScrollView(
+                    controller: _scrollController,
                     child: Column(
                       children: state.favoritesList
                           ?.map(
@@ -88,6 +87,7 @@
                                         (state.favoritesList?.length ?? 0) - 1,
                                 favorite: favorite,
                                 performanceReportCubit: state.reportCubitList?[state.favoritesList?.indexOf(favorite) ?? 0],
+                                scrollController: _scrollController,
                               ),
                             ),
                           )
Index: lib/src/presentation/screens/favorite/favorite_performance_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nimport 'package:asset_vantage/src/config/extensions/size_extensions.dart';\nimport 'package:asset_vantage/src/domain/entities/favorites/favorites_entity.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:flutter_screenutil/flutter_screenutil.dart';\nimport 'package:flutter_slidable/flutter_slidable.dart';\n\nimport '../../../config/constants/route_constants.dart';\nimport '../../../config/constants/size_constants.dart';\nimport '../../../injector.dart';\nimport '../../blocs/favorites/favorites_cubit.dart';\nimport '../../blocs/performance/performance_as_on_date/performance_as_on_date_cubit.dart';\nimport '../../blocs/performance/performance_currency/performance_currency_cubit.dart';\nimport '../../blocs/performance/performance_denomination/performance_denomination_cubit.dart';\nimport '../../blocs/performance/performance_entity/performance_entity_cubit.dart';\nimport '../../blocs/performance/performance_number_of_period/performance_number_of_period_cubit.dart';\nimport '../../blocs/performance/performance_period/performance_period_cubit.dart';\nimport '../../blocs/performance/performance_primary_grouping/performance_primary_grouping_cubit.dart';\nimport '../../blocs/performance/performance_primary_sub_grouping/performance_primary_sub_grouping_cubit.dart';\nimport '../../blocs/performance/performance_report/performance_report_cubit.dart';\nimport '../../blocs/performance/performance_return_percent/performance_return_percent_cubit.dart';\nimport '../../blocs/performance/performance_secondary_grouping/performance_secondary_grouping_cubit.dart';\nimport '../../blocs/performance/performance_secondary_sub_grouping/performance_secondary_sub_grouping_cubit.dart';\nimport '../../blocs/performance/performance_sort_cubit/performance_sort_cubit.dart';\nimport '../../theme/theme_color.dart';\nimport '../dashboard/dashboard_screen.dart';\nimport '../dashboard/highlights/performance_widget.dart';\n\nclass FavoritePerformanceWidget extends StatefulWidget {\n  final Favorite? favorite;\n  final bool isLastIndex;\n  final PerformanceReportCubit performanceReportCubit;\n  const FavoritePerformanceWidget({\n    super.key,\n    required this.favorite,\n    required this.isLastIndex,\n    required this.performanceReportCubit,\n  });\n\n  @override\n  State<FavoritePerformanceWidget> createState() => _FavoritePerformanceWidgetState();\n}\n\nclass _FavoritePerformanceWidgetState extends State<FavoritePerformanceWidget>\n    with TickerProviderStateMixin {\n  late SlidableController _controller;\n  bool callSlidableOnpressedOnce = true;\n  bool pinned = true;\n\n  late PerformancePrimaryGroupingCubit performancePrimaryGroupingCubit;\n  late PerformanceEntityCubit performanceEntityCubit;\n  late PerformancePrimarySubGroupingCubit performancePrimarySubGroupingCubit;\n  late PerformanceSecondaryGroupingCubit performanceSecondaryGroupingCubit;\n  late PerformanceSecondarySubGroupingCubit\n  performanceSecondarySubGroupingCubit;\n  late PerformanceReportCubit performanceReportCubit;\n  late PerformancePeriodCubit performancePeriodCubit;\n  late PerformanceNumberOfPeriodCubit performanceNumberOfPeriodCubit;\n  late PerformanceReturnPercentCubit performanceReturnPercentCubit;\n  late PerformanceDenominationCubit performanceDenominationCubit;\n  late PerformanceCurrencyCubit performanceCurrencyCubit;\n  late PerformanceAsOnDateCubit performanceAsOnDateCubit;\n  late PerformanceSortCubit performanceSortCubit;\n\n\n  @override\n  void initState() {\n    super.initState();\n    performanceReportCubit = widget.performanceReportCubit;\n    performanceEntityCubit = widget.performanceReportCubit.performanceEntityCubit;\n    performancePrimaryGroupingCubit =\n        widget.performanceReportCubit.performancePrimaryGroupingCubit;\n    performancePrimarySubGroupingCubit =\n        widget.performanceReportCubit.performancePrimarySubGroupingCubit;\n    performanceSecondaryGroupingCubit =\n        widget.performanceReportCubit.performanceSecondaryGroupingCubit;\n    performanceSecondarySubGroupingCubit =\n        widget.performanceReportCubit.performanceSecondarySubGroupingCubit;\n    performancePeriodCubit = widget.performanceReportCubit.performancePeriodCubit;\n    performanceNumberOfPeriodCubit =\n        widget.performanceReportCubit.performanceNumberOfPeriodCubit;\n    performanceReturnPercentCubit =\n        widget.performanceReportCubit.performanceReturnPercentCubit;\n    performanceDenominationCubit =\n        widget.performanceReportCubit.performanceDenominationCubit;\n    performanceCurrencyCubit = widget.performanceReportCubit.performanceCurrencyCubit;\n    performanceAsOnDateCubit = widget.performanceReportCubit.performanceAsOnDateCubit;\n    performanceSortCubit = widget.performanceReportCubit.performanceSortCubit;\n\n    _controller = SlidableController(this);\n    addListenertoSlidable();\n  }\n\n  void addListenertoSlidable() => _controller.animation.addStatusListener(\n        (status) {\n      if (status == AnimationStatus.completed) {\n        callSlidableOnpressedOnce = true;\n        setState(() {});\n        _controller.close();\n      } else if (status == AnimationStatus.forward || status==AnimationStatus.reverse) {\n        _controller.animation.addListener(() {\n          if (_controller.animation.value > 0.15 &&\n              callSlidableOnpressedOnce) {\n            callSlidableOnpressedOnce = false;\n            setState(() {});\n            if (_controller.actionPaneType.value == ActionPaneType.start) {\n              showDialog(\n                context: context,\n                barrierDismissible: false,\n                builder: (context) => Dialog(\n                  shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(Sizes.dimen_8.r)),\n                  insetPadding: EdgeInsets.symmetric(\n                      horizontal: (ScreenUtil().screenWidth * 0.15).w),\n                  child: Padding(\n                    padding: EdgeInsets.symmetric(\n                        vertical: Sizes.dimen_6.h,\n                        horizontal: Sizes.dimen_12.w),\n                    child: Column(\n                      mainAxisSize: MainAxisSize.min,\n                      children: [\n                        Text(\n                          \"Are you sure, you want to ${pinned ? \"unpin\" : \"pin\"} this report?\",\n                          style: Theme.of(context).textTheme.titleMedium,\n                        ),\n                        Row(\n                          mainAxisAlignment: MainAxisAlignment.end,\n                          children: [\n                            TextButton(\n                              onPressed: () => Navigator.of(context).popUntil(\n                                    (route) =>\n                                route.settings.name ==\n                                    RouteList.dashboard,\n                              ),\n                              child: Text(\n                                'No',\n                                style: Theme.of(context)\n                                    .textTheme\n                                    .titleMedium\n                                    ?.copyWith(\n                                    color: Theme.of(context).primaryColor,\n                                    fontWeight: FontWeight.bold),\n                              ),\n                            ),\n                            TextButton(\n                              onPressed: () => Navigator.of(context).popUntil(\n                                    (route) =>\n                                route.settings.name ==\n                                    RouteList.dashboard,\n                              ),\n                              child: Text(\n                                'Yes',\n                                style: Theme.of(context)\n                                    .textTheme\n                                    .titleMedium\n                                    ?.copyWith(\n                                    color: Theme.of(context).primaryColor,\n                                    fontWeight: FontWeight.bold),\n                              ),\n                            )\n                          ],\n                        )\n                      ],\n                    ),\n                  ),\n                ),\n              );\n            } else if (_controller.actionPaneType.value ==\n                ActionPaneType.end) {\n              showModalBottomSheet(\n                context: context,\n                shape: RoundedRectangleBorder(\n                  borderRadius: BorderRadius.only(\n                    topLeft: Radius.circular(Sizes.dimen_10.r),\n                    topRight: Radius.circular(Sizes.dimen_10.r),\n                  ),\n                ),\n                isScrollControlled: true,\n                builder: (context) {\n                  return DraggableScrollableSheet(\n                    initialChildSize: 0.25,\n                    minChildSize: 0,\n                    maxChildSize: 0.25,\n                    expand: false,\n                    builder: (context, scrollController) {\n                      return Container(\n                        padding: EdgeInsets.only(\n                          top: Sizes.dimen_10.w,\n                          left: Sizes.dimen_14.w,\n                          right: Sizes.dimen_14.w,\n                        ),\n                        child: Column(\n                          children: [\n                            Container(\n                              height: Sizes.dimen_2.h,\n                              width: Sizes.dimen_48.w,\n                              decoration: BoxDecoration(\n                                  color: AppColor.textGrey,\n                                  borderRadius: BorderRadius.circular(\n                                      Sizes.dimen_32.r)),\n                            ),\n                            SizedBox(\n                              height: Sizes.dimen_6.h,\n                            ),\n                            GestureDetector(\n                              onTap: () {\n                                Navigator.of(context).popUntil(\n                                      (route) =>\n                                  route.settings.name ==\n                                      RouteList.dashboard,\n                                );\n                              },\n                              child: Container(\n                                padding: EdgeInsets.symmetric(\n                                    horizontal: Sizes.dimen_16.w,\n                                    vertical: Sizes.dimen_6.h),\n                                child: Row(\n                                  mainAxisSize: MainAxisSize.max,\n                                  children: [\n                                    Expanded(\n                                      child: Text(\n                                        \"Make a copy\",\n                                        style: Theme.of(context)\n                                            .textTheme\n                                            .titleLarge\n                                            ?.copyWith(\n                                            fontWeight: FontWeight.bold,\n                                            color: AppColor.grey),\n                                      ),\n                                    ),\n                                    Icon(\n                                      Icons.copy,\n                                      size: Sizes.dimen_24.w,\n                                      color: AppColor.grey,\n                                    )\n                                  ],\n                                ),\n                              ),\n                            ),\n                            Divider(\n                              color: AppColor.grey,\n                              thickness: 0.4,\n                              height: 0.4,\n                              indent: Sizes.dimen_16.w,\n                              endIndent: Sizes.dimen_16.w,\n                            ),\n                            GestureDetector(\n                              onTap: () {\n                                context.read<FavoritesCubit>().removeFavorites(favorite: widget.favorite);\n                                Navigator.of(context).popUntil(\n                                      (route) =>\n                                  route.settings.name ==\n                                      RouteList.dashboard,\n                                );\n                              },\n                              child: Container(\n                                padding: EdgeInsets.symmetric(\n                                    horizontal: Sizes.dimen_16.w,\n                                    vertical: Sizes.dimen_6.h),\n                                child: Row(\n                                  mainAxisSize: MainAxisSize.max,\n                                  children: [\n                                    Expanded(\n                                      child: Text(\n                                        \"Delete\",\n                                        style: Theme.of(context)\n                                            .textTheme\n                                            .titleLarge\n                                            ?.copyWith(\n                                            fontWeight: FontWeight.bold,\n                                            color: AppColor.red),\n                                      ),\n                                    ),\n                                    Icon(\n                                      Icons.delete_outline,\n                                      size: Sizes.dimen_26.w,\n                                      color: AppColor.red,\n                                    )\n                                  ],\n                                ),\n                              ),\n                            )\n                          ],\n                        ),\n                      );\n                    },\n                  );\n                },\n              ).then((value){\n                if(value==null){\n                  Navigator.of(context).popUntil(\n                        (route) =>\n                    route.settings.name ==\n                        RouteList.dashboard,\n                  );\n                }\n              });\n            }\n          }\n        });\n      }\n    },\n  );\n\n  @override\n  void dispose() {\n    super.dispose();\n    _controller.animation.removeStatusListener((status) {},);\n    _controller.animation.removeListener(() {},);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MultiBlocProvider(\n      providers: [\n        BlocProvider(\n          create: (context) => performanceSortCubit,\n        ),\n        BlocProvider(\n          create: (context) => performanceEntityCubit,\n        ),\n        BlocProvider(\n          create: (context) => performanceReportCubit,\n        ),\n        BlocProvider(\n          create: (context) => performancePrimaryGroupingCubit,\n        ),\n        BlocProvider(\n          create: (context) => performancePrimarySubGroupingCubit,\n        ),\n        BlocProvider(\n          create: (context) => performanceSecondaryGroupingCubit,\n        ),\n        BlocProvider(\n          create: (context) => performanceSecondarySubGroupingCubit,\n        ),\n        BlocProvider(\n          create: (context) => performancePeriodCubit,\n        ),\n        BlocProvider(\n          create: (context) => performanceNumberOfPeriodCubit,\n        ),\n        BlocProvider(\n          create: (context) => performanceCurrencyCubit,\n        ),\n        BlocProvider(\n          create: (context) => performanceDenominationCubit,\n        ),\n        BlocProvider(\n          create: (context) => performanceReturnPercentCubit,\n        ),\n        BlocProvider(\n          create: (context) => performanceAsOnDateCubit,\n        ),\n      ],\n      child: Slidable(\n          controller: _controller,\n          startActionPane: ActionPane(\n            extentRatio: 0.2,\n            motion: const BehindMotion(),\n            children: [\n              CustomSlidableAction(\n                onPressed: (_) {},\n                borderRadius: BorderRadius.only(\n                  topLeft: Radius.circular(Sizes.dimen_8.r),\n                  bottomLeft: Radius.circular(Sizes.dimen_8.r),\n                ),\n                foregroundColor: AppColor.white,\n                backgroundColor: AppColor.primary,\n                autoClose: true,\n                child: AnimatedRotation(\n                  turns: 1 / 8,\n                  duration: const Duration(seconds: 0),\n                  child: Icon(\n                    pinned ? Icons.push_pin_outlined : Icons.push_pin_sharp,\n                    size: Sizes.dimen_28.sp,\n                  ),\n                ),\n              )\n            ],\n          ),\n          endActionPane: ActionPane(\n            extentRatio: 0.2,\n            motion: const BehindMotion(),\n            children: [\n              CustomSlidableAction(\n                onPressed: (_) {},\n                backgroundColor: AppColor.grey,\n                foregroundColor: Colors.white,\n                borderRadius: BorderRadius.only(\n                  topRight: Radius.circular(Sizes.dimen_8.r),\n                  bottomRight: Radius.circular(Sizes.dimen_8.r),\n                ),\n                child: AnimatedRotation(\n                  turns: 1 / 2,\n                  duration: const Duration(seconds: 0),\n                  child: Icon(\n                    Icons.more_horiz,\n                    size: Sizes.dimen_38.sp,\n                  ),\n                ),\n              ),\n            ],\n          ),\n          child: PerformanceWidget(\n            isFavorite: true,\n            favorite: widget.favorite,\n            performanceSortCubit: performanceReportCubit.performanceSortCubit,\n            performanceEntityCubit:\n            performanceReportCubit.performanceEntityCubit,\n            performanceReportCubit: performanceReportCubit,\n            performancePrimaryGroupingCubit:\n            performanceReportCubit.performancePrimaryGroupingCubit,\n            performanceSecondaryGroupingCubit:\n            performanceReportCubit.performanceSecondaryGroupingCubit,\n            performancePrimarySubGroupingCubit:\n            performanceReportCubit.performancePrimarySubGroupingCubit,\n            performanceSecondarySubGroupingCubit:\n            performanceReportCubit.performanceSecondarySubGroupingCubit,\n            performanceNumberOfPeriodCubit:\n            performanceReportCubit.performanceNumberOfPeriodCubit,\n            performanceReturnPercentCubit:\n            performanceReportCubit.performanceReturnPercentCubit,\n            performanceCurrencyCubit:\n            performanceReportCubit.performanceCurrencyCubit,\n            performanceDenominationCubit:\n            performanceReportCubit.performanceDenominationCubit,\n            performanceAsOnDateCubit:\n            performanceReportCubit.performanceAsOnDateCubit,\n            performancePeriodCubit:\n            performanceReportCubit.performancePeriodCubit,\n          )\n      ),\n    );\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/src/presentation/screens/favorite/favorite_performance_widget.dart b/lib/src/presentation/screens/favorite/favorite_performance_widget.dart
--- a/lib/src/presentation/screens/favorite/favorite_performance_widget.dart	(revision c2f4d3973856b591a98ccedfc7da5c80b85d39a3)
+++ b/lib/src/presentation/screens/favorite/favorite_performance_widget.dart	(date 1731918580346)
@@ -6,6 +6,7 @@
 import 'package:flutter_screenutil/flutter_screenutil.dart';
 import 'package:flutter_slidable/flutter_slidable.dart';
 
+import '../../../config/constants/favorite_constants.dart';
 import '../../../config/constants/route_constants.dart';
 import '../../../config/constants/size_constants.dart';
 import '../../../injector.dart';
@@ -31,11 +32,13 @@
   final Favorite? favorite;
   final bool isLastIndex;
   final PerformanceReportCubit performanceReportCubit;
+  final ScrollController scrollController;
   const FavoritePerformanceWidget({
     super.key,
     required this.favorite,
     required this.isLastIndex,
     required this.performanceReportCubit,
+    required this.scrollController,
   });
 
   @override
@@ -46,7 +49,7 @@
     with TickerProviderStateMixin {
   late SlidableController _controller;
   bool callSlidableOnpressedOnce = true;
-  bool pinned = true;
+  bool get pinned => (widget.favorite?.isPined ?? false);
 
   late PerformancePrimaryGroupingCubit performancePrimaryGroupingCubit;
   late PerformanceEntityCubit performanceEntityCubit;
@@ -144,11 +147,16 @@
                               ),
                             ),
                             TextButton(
-                              onPressed: () => Navigator.of(context).popUntil(
-                                    (route) =>
-                                route.settings.name ==
-                                    RouteList.dashboard,
-                              ),
+                              onPressed: () {
+                                context.read<FavoritesCubit>().pinUnpinFavoriteReport(
+                                  favorite: widget.favorite,
+                                ).then((value) => widget.scrollController.animateTo(widget.scrollController.position.minScrollExtent, duration: const Duration(milliseconds: 500), curve: Curves.bounceIn),);
+                                Navigator.of(context).popUntil(
+                                      (route) =>
+                                  route.settings.name ==
+                                      RouteList.dashboard,
+                                );
+                              },
                               child: Text(
                                 'Yes',
                                 style: Theme.of(context)
@@ -205,6 +213,20 @@
                             ),
                             GestureDetector(
                               onTap: () {
+                                context.read<FavoritesCubit>().saveFilters(
+                                  shouldUpdate: false,
+                                  reportId: FavoriteConstants.performanceId,
+                                  reportName: "${widget.favorite?.reportname} Copy",
+                                  entity: performanceEntityCubit.state.selectedPerformanceEntity,
+                                  primaryGrouping: performancePrimaryGroupingCubit.state.selectedGrouping,
+                                  primarySubGrouping: performancePrimarySubGroupingCubit.state.selectedSubGroupingList,
+                                  secondaryGrouping: performanceSecondaryGroupingCubit.state.selectedGrouping,
+                                  secondarySubGrouping: performanceSecondarySubGroupingCubit.state.selectedSubGroupingList,
+                                  returnPercent: performanceReturnPercentCubit.state.selectedPerformanceReturnPercentList,
+                                  currency: performanceCurrencyCubit.state.selectedPerformanceCurrency,
+                                  denomination: performanceDenominationCubit.state.selectedPerformanceDenomination,
+                                  asOnDate: performanceAsOnDateCubit.state.asOnDate,
+                                ).then((value) => widget.scrollController.animateTo(widget.scrollController.position.maxScrollExtent, duration: const Duration(milliseconds: 500), curve: Curves.bounceIn),);
                                 Navigator.of(context).popUntil(
                                       (route) =>
                                   route.settings.name ==
