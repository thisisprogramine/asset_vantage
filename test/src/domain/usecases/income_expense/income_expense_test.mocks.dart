// Mocks generated by Mockito 5.3.2 from annotations
// in asset_vantage/test/src/domain/usecases/income_expense/income_expense_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:asset_vantage/src/domain/entities/app_error.dart' as _i5;
import 'package:asset_vantage/src/domain/entities/expense/expense_account_entity.dart'
    as _i6;
import 'package:asset_vantage/src/domain/entities/expense/expense_report_entity.dart'
    as _i9;
import 'package:asset_vantage/src/domain/entities/income/income_account_entity.dart'
    as _i12;
import 'package:asset_vantage/src/domain/entities/income/income_report_entity.dart'
    as _i15;
import 'package:asset_vantage/src/domain/entities/income_expense/income_expense_number_of_period_entity.dart'
    as _i21;
import 'package:asset_vantage/src/domain/entities/income_expense/income_expense_period_entity.dart'
    as _i18;
import 'package:asset_vantage/src/domain/params/expense/expense_account_params.dart'
    as _i7;
import 'package:asset_vantage/src/domain/params/expense/expense_report_params.dart'
    as _i10;
import 'package:asset_vantage/src/domain/params/income/income_account_params.dart'
    as _i13;
import 'package:asset_vantage/src/domain/params/income/income_report_params.dart'
    as _i16;
import 'package:asset_vantage/src/domain/params/no_params.dart' as _i19;
import 'package:asset_vantage/src/domain/usecases/expense/get_expense_account.dart'
    as _i3;
import 'package:asset_vantage/src/domain/usecases/expense/get_expense_report.dart'
    as _i8;
import 'package:asset_vantage/src/domain/usecases/income/get_income_account.dart'
    as _i11;
import 'package:asset_vantage/src/domain/usecases/income/get_income_report.dart'
    as _i14;
import 'package:asset_vantage/src/domain/usecases/income_expense/get_income_expense_period.dart'
    as _i17;
import 'package:asset_vantage/src/domain/usecases/income_expense/get_income_expense_worth_number_of%20_period.dart'
    as _i20;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetExpenseAccount].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExpenseAccount extends _i1.Mock implements _i3.GetExpenseAccount {
  MockGetExpenseAccount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppError, _i6.ExpenseAccountEntity>> call(
          _i7.ExpenseAccountParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.AppError, _i6.ExpenseAccountEntity>>.value(
            _FakeEither_0<_i5.AppError, _i6.ExpenseAccountEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppError, _i6.ExpenseAccountEntity>>);
}

/// A class which mocks [GetExpenseReport].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExpenseReport extends _i1.Mock implements _i8.GetExpenseReport {
  MockGetExpenseReport() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppError, _i9.ExpenseReportEntity>> call(
          _i10.ExpenseReportParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppError, _i9.ExpenseReportEntity>>.value(
                _FakeEither_0<_i5.AppError, _i9.ExpenseReportEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppError, _i9.ExpenseReportEntity>>);
}

/// A class which mocks [GetIncomeAccount].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetIncomeAccount extends _i1.Mock implements _i11.GetIncomeAccount {
  MockGetIncomeAccount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppError, _i12.IncomeAccountEntity>> call(
          _i13.IncomeAccountParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.AppError, _i12.IncomeAccountEntity>>.value(
            _FakeEither_0<_i5.AppError, _i12.IncomeAccountEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppError, _i12.IncomeAccountEntity>>);
}

/// A class which mocks [GetIncomeReport].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetIncomeReport extends _i1.Mock implements _i14.GetIncomeReport {
  MockGetIncomeReport() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppError, _i15.IncomeReportEntity>> call(
          _i16.IncomeReportParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppError, _i15.IncomeReportEntity>>.value(
                _FakeEither_0<_i5.AppError, _i15.IncomeReportEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppError, _i15.IncomeReportEntity>>);
}

/// A class which mocks [GetIncomeExpensePeriod].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetIncomeExpensePeriod extends _i1.Mock
    implements _i17.GetIncomeExpensePeriod {
  MockGetIncomeExpensePeriod() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppError, _i18.IncomeExpensePeriodEntity>> call(
          _i19.NoParams? noParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noParams],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.AppError, _i18.IncomeExpensePeriodEntity>>.value(
            _FakeEither_0<_i5.AppError, _i18.IncomeExpensePeriodEntity>(
          this,
          Invocation.method(
            #call,
            [noParams],
          ),
        )),
      ) as _i4
          .Future<_i2.Either<_i5.AppError, _i18.IncomeExpensePeriodEntity>>);
}

/// A class which mocks [GetIncomeExpenseNumberOfPeriod].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetIncomeExpenseNumberOfPeriod extends _i1.Mock
    implements _i20.GetIncomeExpenseNumberOfPeriod {
  MockGetIncomeExpenseNumberOfPeriod() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<_i5.AppError, _i21.IncomeExpenseNumberOfPeriodEntity>> call(
          _i19.NoParams? noParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noParams],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.AppError,
                    _i21.IncomeExpenseNumberOfPeriodEntity>>.value(
            _FakeEither_0<_i5.AppError, _i21.IncomeExpenseNumberOfPeriodEntity>(
          this,
          Invocation.method(
            #call,
            [noParams],
          ),
        )),
      ) as _i4.Future<
          _i2.Either<_i5.AppError, _i21.IncomeExpenseNumberOfPeriodEntity>>);
}
