// Mocks generated by Mockito 5.3.2 from annotations
// in asset_vantage/test/src/domain/usecases/document/documents_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:asset_vantage/src/domain/entities/app_error.dart' as _i5;
import 'package:asset_vantage/src/domain/entities/document/document_entity.dart'
    as _i9;
import 'package:asset_vantage/src/domain/entities/document/download_entity.dart'
    as _i6;
import 'package:asset_vantage/src/domain/params/document/document_params.dart'
    as _i10;
import 'package:asset_vantage/src/domain/params/document/download_params.dart'
    as _i7;
import 'package:asset_vantage/src/domain/params/document/search_document_params.dart'
    as _i12;
import 'package:asset_vantage/src/domain/usecases/document/download_documents.dart'
    as _i3;
import 'package:asset_vantage/src/domain/usecases/document/get_documents.dart'
    as _i8;
import 'package:asset_vantage/src/domain/usecases/document/search_document.dart'
    as _i11;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DownloadDocuments].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadDocuments extends _i1.Mock implements _i3.DownloadDocuments {
  MockDownloadDocuments() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppError, _i6.DownloadEntity>> call(
          _i7.DownloadParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppError, _i6.DownloadEntity>>.value(
                _FakeEither_0<_i5.AppError, _i6.DownloadEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppError, _i6.DownloadEntity>>);
}

/// A class which mocks [GetDocuments].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDocuments extends _i1.Mock implements _i8.GetDocuments {
  MockGetDocuments() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppError, _i9.DocumentEntity>> call(
          _i10.DocumentParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppError, _i9.DocumentEntity>>.value(
                _FakeEither_0<_i5.AppError, _i9.DocumentEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppError, _i9.DocumentEntity>>);
}

/// A class which mocks [SearchDocuments].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchDocuments extends _i1.Mock implements _i11.SearchDocuments {
  MockSearchDocuments() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppError, _i9.DocumentEntity>> call(
          _i12.SearchDocumentParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppError, _i9.DocumentEntity>>.value(
                _FakeEither_0<_i5.AppError, _i9.DocumentEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppError, _i9.DocumentEntity>>);
}
